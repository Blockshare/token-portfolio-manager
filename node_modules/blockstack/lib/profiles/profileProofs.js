'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validateProofs = validateProofs;

var _services = require('./services');

var validationTimeout = 30000; // 30 seconds

function validateProofs(profile, fqdn) {
  if (!profile) {
    throw new Error('Profile must not be null');
  }

  var promise = new Promise(function (resolve) {
    var proofs = [];
    var accounts = [];

    if (profile.hasOwnProperty('account')) {
      accounts = profile.account;
    } else {
      resolve(proofs);
    }

    var accountsToValidate = accounts.length;

    var timeoutTimer = setTimeout(function () {
      console.error('Blockstack proof validation timed out.');
      resolve(proofs);
    }, validationTimeout);

    accounts.forEach(function (account) {
      // skip if proof service is not supported
      if (account.hasOwnProperty('service') && !_services.profileServices.hasOwnProperty(account.service)) {
        accountsToValidate--;
        return;
      }

      if (!(account.hasOwnProperty('proofType') && account.proofType === 'http' && account.hasOwnProperty('proofUrl'))) {
        accountsToValidate--;
        return;
      }

      var proof = {
        service: account.service,
        proof_url: account.proofUrl,
        identifier: account.identifier,
        valid: false
      };

      _services.profileServices[account.service].validateProof(proof, fqdn).then(function (validatedProof) {
        proofs.push(validatedProof);
        if (proofs.length >= accountsToValidate) {
          clearTimeout(timeoutTimer);
          resolve(proofs);
        }
      });
    });
  });

  return promise;
}